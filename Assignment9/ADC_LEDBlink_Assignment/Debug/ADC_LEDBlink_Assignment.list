
ADC_LEDBlink_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080010dc  080010dc  000020dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800111c  0800111c  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  0800111c  0800111c  0000211c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001124  08001124  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001124  08001124  00002124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001128  08001128  00002128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800112c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000173a  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000074d  00000000  00000000  000047b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00004f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dc  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019438  00000000  00000000  00005134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e0c  00000000  00000000  0001e56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdb0  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac128  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000870  00000000  00000000  000ac16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ac9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  000ac9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080010c4 	.word	0x080010c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080010c4 	.word	0x080010c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <LedInit>:
 Date: Sep 19, 2024
 */

#include "led.h"

void LedInit(uint32_t pin) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	// enable GPIOD clock -- RCC AHB1ENR[GPIO_CLKEN] = 1
	RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 80002c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000378 <LedInit+0xb8>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000378 <LedInit+0xb8>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30
	// config GPIOD.pin as output -- MODER[2*pin+1:2*pin] - 01
	GPIO_LED->MODER &= ~BV(pin * 2 + 1);
 80002d4:	4b29      	ldr	r3, [pc, #164]	@ (800037c <LedInit+0xbc>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	0052      	lsls	r2, r2, #1
 80002dc:	3201      	adds	r2, #1
 80002de:	2101      	movs	r1, #1
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	4611      	mov	r1, r2
 80002e8:	4a24      	ldr	r2, [pc, #144]	@ (800037c <LedInit+0xbc>)
 80002ea:	400b      	ands	r3, r1
 80002ec:	6013      	str	r3, [r2, #0]
	GPIO_LED->MODER |= BV(pin * 2);
 80002ee:	4b23      	ldr	r3, [pc, #140]	@ (800037c <LedInit+0xbc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a1f      	ldr	r2, [pc, #124]	@ (800037c <LedInit+0xbc>)
 8000300:	430b      	orrs	r3, r1
 8000302:	6013      	str	r3, [r2, #0]
	// config GPIOD.pin as pushpull -- OTYPER[pin] - 0
	GPIO_LED->OTYPER &= ~BV(pin);
 8000304:	4b1d      	ldr	r3, [pc, #116]	@ (800037c <LedInit+0xbc>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	2101      	movs	r1, #1
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	fa01 f202 	lsl.w	r2, r1, r2
 8000310:	43d2      	mvns	r2, r2
 8000312:	4611      	mov	r1, r2
 8000314:	4a19      	ldr	r2, [pc, #100]	@ (800037c <LedInit+0xbc>)
 8000316:	400b      	ands	r3, r1
 8000318:	6053      	str	r3, [r2, #4]
	// config GPIOD.pin as low-speed -- OSPEEDR[2*pin+1:2*pin] - 00
	GPIO_LED->OSPEEDR &= ~(BV(pin*2+1) | BV(pin * 2));
 800031a:	4b18      	ldr	r3, [pc, #96]	@ (800037c <LedInit+0xbc>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	0052      	lsls	r2, r2, #1
 8000322:	3201      	adds	r2, #1
 8000324:	2101      	movs	r1, #1
 8000326:	4091      	lsls	r1, r2
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	2001      	movs	r0, #1
 800032e:	fa00 f202 	lsl.w	r2, r0, r2
 8000332:	430a      	orrs	r2, r1
 8000334:	43d2      	mvns	r2, r2
 8000336:	4611      	mov	r1, r2
 8000338:	4a10      	ldr	r2, [pc, #64]	@ (800037c <LedInit+0xbc>)
 800033a:	400b      	ands	r3, r1
 800033c:	6093      	str	r3, [r2, #8]
	// config GPIOD.pin with no pullup & pulldown resistor PUPDR[2*pin+1:2*pin] -- 00
	GPIO_LED->PUPDR &= ~BV(pin * 2 + 1);
 800033e:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <LedInit+0xbc>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	0052      	lsls	r2, r2, #1
 8000346:	3201      	adds	r2, #1
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	43d2      	mvns	r2, r2
 8000350:	4611      	mov	r1, r2
 8000352:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <LedInit+0xbc>)
 8000354:	400b      	ands	r3, r1
 8000356:	60d3      	str	r3, [r2, #12]
	GPIO_LED->PUPDR |= BV(pin * 2);
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <LedInit+0xbc>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	0052      	lsls	r2, r2, #1
 8000360:	2101      	movs	r1, #1
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	4611      	mov	r1, r2
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <LedInit+0xbc>)
 800036a:	430b      	orrs	r3, r1
 800036c:	60d3      	str	r3, [r2, #12]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40023800 	.word	0x40023800
 800037c:	40020c00 	.word	0x40020c00

08000380 <LedOn>:

void LedOn(uint32_t pin) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 1
	GPIO_LED->ODR |= BV(pin);
 8000388:	4b07      	ldr	r3, [pc, #28]	@ (80003a8 <LedOn+0x28>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	2101      	movs	r1, #1
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	4611      	mov	r1, r2
 8000396:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <LedOn+0x28>)
 8000398:	430b      	orrs	r3, r1
 800039a:	6153      	str	r3, [r2, #20]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40020c00 	.word	0x40020c00

080003ac <LedOff>:

void LedOff(uint32_t pin) {
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 0
	GPIO_LED->ODR &= ~BV(pin);
 80003b4:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <LedOff+0x28>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	2101      	movs	r1, #1
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	43d2      	mvns	r2, r2
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a03      	ldr	r2, [pc, #12]	@ (80003d4 <LedOff+0x28>)
 80003c6:	400b      	ands	r3, r1
 80003c8:	6153      	str	r3, [r2, #20]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40020c00 	.word	0x40020c00

080003d8 <LedBlink>:

void LedBlink(uint32_t pin, uint32_t delayMs) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
	LedOn(pin);
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f7ff ffcc 	bl	8000380 <LedOn>
	DelayMs(delayMs);
 80003e8:	6838      	ldr	r0, [r7, #0]
 80003ea:	f7ff ff41 	bl	8000270 <DelayMs>
	LedOff(pin);
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ffdc 	bl	80003ac <LedOff>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <ADC_Init>:
 */

#include "adc.h"
#include "stm32f4xx.h"

void ADC_Init(void) {
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000400:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <ADC_Init+0x5c>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <ADC_Init+0x5c>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= BV(0 * 2) | BV(0 * 2 + 1);
 800040c:	4b13      	ldr	r3, [pc, #76]	@ (800045c <ADC_Init+0x60>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a12      	ldr	r2, [pc, #72]	@ (800045c <ADC_Init+0x60>)
 8000412:	f043 0303 	orr.w	r3, r3, #3
 8000416:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000418:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <ADC_Init+0x5c>)
 800041a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800041c:	4a0e      	ldr	r2, [pc, #56]	@ (8000458 <ADC_Init+0x5c>)
 800041e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000422:	6453      	str	r3, [r2, #68]	@ 0x44
	ADC1->CR1 &= ~(ADC_CR1_RES_0 | ADC_CR1_RES_1);
 8000424:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <ADC_Init+0x64>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	4a0d      	ldr	r2, [pc, #52]	@ (8000460 <ADC_Init+0x64>)
 800042a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800042e:	6053      	str	r3, [r2, #4]
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8000430:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <ADC_Init+0x64>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	4a0a      	ldr	r2, [pc, #40]	@ (8000460 <ADC_Init+0x64>)
 8000436:	f023 0302 	bic.w	r3, r3, #2
 800043a:	6093      	str	r3, [r2, #8]
	ADC1->SQR1 |= (0 << ADC_SQR3_SQ1_Pos);
 800043c:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <ADC_Init+0x64>)
 800043e:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ADC_Init+0x64>)
 8000440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000442:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->CR2 |= ADC_CR2_ADON;
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ADC_Init+0x64>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	4a05      	ldr	r2, [pc, #20]	@ (8000460 <ADC_Init+0x64>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6093      	str	r3, [r2, #8]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40023800 	.word	0x40023800
 800045c:	40020000 	.word	0x40020000
 8000460:	40012000 	.word	0x40012000

08000464 <ADC_GetValue>:
uint16_t ADC_GetValue(void) {
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_SWSTART;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <ADC_GetValue+0x34>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	4a0a      	ldr	r2, [pc, #40]	@ (8000498 <ADC_GetValue+0x34>)
 8000470:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000474:	6093      	str	r3, [r2, #8]
	while (!(ADC1->SR & ADC_SR_EOC))
 8000476:	bf00      	nop
 8000478:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <ADC_GetValue+0x34>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f003 0302 	and.w	r3, r3, #2
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f9      	beq.n	8000478 <ADC_GetValue+0x14>
		;
	uint16_t val = ADC1->DR;
 8000484:	4b04      	ldr	r3, [pc, #16]	@ (8000498 <ADC_GetValue+0x34>)
 8000486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000488:	80fb      	strh	r3, [r7, #6]
	return val;
 800048a:	88fb      	ldrh	r3, [r7, #6]
}
 800048c:	4618      	mov	r0, r3
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40012000 	.word	0x40012000

0800049c <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80004a4:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <DelayMs+0x44>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80004aa:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <DelayMs+0x48>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <DelayMs+0x4c>)
 80004b0:	fba2 2303 	umull	r2, r3, r2, r3
 80004b4:	099b      	lsrs	r3, r3, #6
 80004b6:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	fb02 f303 	mul.w	r3, r2, r3
 80004c0:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80004c2:	bf00      	nop
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <DelayMs+0x44>)
 80004c6:	685a      	ldr	r2, [r3, #4]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d3f8      	bcc.n	80004c4 <DelayMs+0x28>
}
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e0001000 	.word	0xe0001000
 80004e4:	20000000 	.word	0x20000000
 80004e8:	10624dd3 	.word	0x10624dd3

080004ec <main>:

#include "led.h"
#include "adc.h"
#include "uart.h"

int main(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08a      	sub	sp, #40	@ 0x28
 80004f0:	af00      	add	r7, sp, #0
	uint16_t val;
	char str[32];
	SystemInit();
 80004f2:	f000 f859 	bl	80005a8 <SystemInit>
	ADC_Init();
 80004f6:	f7ff ff81 	bl	80003fc <ADC_Init>
	LedInit(LED_RED_PIN);
 80004fa:	200e      	movs	r0, #14
 80004fc:	f7ff fee0 	bl	80002c0 <LedInit>
	UartInit(9600);
 8000500:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000504:	f000 f886 	bl	8000614 <UartInit>
	while (1) {
		LedBlink(LED_RED_PIN, 100);
 8000508:	2164      	movs	r1, #100	@ 0x64
 800050a:	200e      	movs	r0, #14
 800050c:	f7ff ff64 	bl	80003d8 <LedBlink>
		val = ADC_GetValue();
 8000510:	f7ff ffa8 	bl	8000464 <ADC_GetValue>
 8000514:	4603      	mov	r3, r0
 8000516:	84fb      	strh	r3, [r7, #38]	@ 0x26
		sprintf(str, "ADC = %u\r\n", val);
 8000518:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4906      	ldr	r1, [pc, #24]	@ (8000538 <main+0x4c>)
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f938 	bl	8000794 <siprintf>
		UartPuts(str);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f8ee 	bl	8000708 <UartPuts>
		DelayMs(1000);
 800052c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000530:	f7ff ffb4 	bl	800049c <DelayMs>
		LedBlink(LED_RED_PIN, 100);
 8000534:	bf00      	nop
 8000536:	e7e7      	b.n	8000508 <main+0x1c>
 8000538:	080010dc 	.word	0x080010dc

0800053c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000544:	4a14      	ldr	r2, [pc, #80]	@ (8000598 <_sbrk+0x5c>)
 8000546:	4b15      	ldr	r3, [pc, #84]	@ (800059c <_sbrk+0x60>)
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000550:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <_sbrk+0x64>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <_sbrk+0x64>)
 800055a:	4a12      	ldr	r2, [pc, #72]	@ (80005a4 <_sbrk+0x68>)
 800055c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800055e:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <_sbrk+0x64>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	693a      	ldr	r2, [r7, #16]
 8000568:	429a      	cmp	r2, r3
 800056a:	d207      	bcs.n	800057c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800056c:	f000 f932 	bl	80007d4 <__errno>
 8000570:	4603      	mov	r3, r0
 8000572:	220c      	movs	r2, #12
 8000574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800057a:	e009      	b.n	8000590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800057c:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000582:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	4a05      	ldr	r2, [pc, #20]	@ (80005a0 <_sbrk+0x64>)
 800058c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20020000 	.word	0x20020000
 800059c:	00000400 	.word	0x00000400
 80005a0:	20000070 	.word	0x20000070
 80005a4:	200001c0 	.word	0x200001c0

080005a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  DWT_Init();
 80005ac:	f000 f802 	bl	80005b4 <DWT_Init>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <DWT_Init+0x58>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	4a13      	ldr	r2, [pc, #76]	@ (800060c <DWT_Init+0x58>)
 80005be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005c2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <DWT_Init+0x58>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a10      	ldr	r2, [pc, #64]	@ (800060c <DWT_Init+0x58>)
 80005ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ce:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <DWT_Init+0x5c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <DWT_Init+0x5c>)
 80005d6:	f023 0301 	bic.w	r3, r3, #1
 80005da:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <DWT_Init+0x5c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <DWT_Init+0x5c>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005e8:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <DWT_Init+0x5c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ee:	bf00      	nop
    __ASM volatile ("NOP");
 80005f0:	bf00      	nop
    __ASM volatile ("NOP");
 80005f2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <DWT_Init+0x5c>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf0c      	ite	eq
 80005fc:	2301      	moveq	r3, #1
 80005fe:	2300      	movne	r3, #0
 8000600:	b2db      	uxtb	r3, r3
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000edf0 	.word	0xe000edf0
 8000610:	e0001000 	.word	0xe0001000

08000614 <UartInit>:
 *      Author: sunbeam
 */

#include "uart.h"

void UartInit(uint32_t baud) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

	RCC->AHB1ENR |= BV(GPIO_UART_CLKEN);
 800061c:	4b2b      	ldr	r3, [pc, #172]	@ (80006cc <UartInit+0xb8>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000620:	4a2a      	ldr	r2, [pc, #168]	@ (80006cc <UartInit+0xb8>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIO_UART->AFR[0] |= BV(14) | BV(13) | BV(12) | BV(10) | BV(9) | BV(8);
 8000628:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <UartInit+0xbc>)
 800062a:	6a1b      	ldr	r3, [r3, #32]
 800062c:	4a28      	ldr	r2, [pc, #160]	@ (80006d0 <UartInit+0xbc>)
 800062e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000632:	6213      	str	r3, [r2, #32]
	GPIO_UART->AFR[0] &= ~(BV(15) | BV(11));
 8000634:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <UartInit+0xbc>)
 8000636:	6a1b      	ldr	r3, [r3, #32]
 8000638:	4a25      	ldr	r2, [pc, #148]	@ (80006d0 <UartInit+0xbc>)
 800063a:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 800063e:	6213      	str	r3, [r2, #32]

	GPIO_UART->MODER &= ~(BV(UART_TX_PIN*2) | BV(UART_RX_PIN*2));
 8000640:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <UartInit+0xbc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <UartInit+0xbc>)
 8000646:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800064a:	6013      	str	r3, [r2, #0]
	GPIO_UART->MODER |= (BV(UART_TX_PIN*2+1) | BV(UART_RX_PIN*2+1));
 800064c:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <UartInit+0xbc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1f      	ldr	r2, [pc, #124]	@ (80006d0 <UartInit+0xbc>)
 8000652:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000656:	6013      	str	r3, [r2, #0]

	RCC->APB1ENR |= BV(UART_CLKEN); //enable uart clock AHB1ENR=>17
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <UartInit+0xb8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <UartInit+0xb8>)
 800065e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000662:	6413      	str	r3, [r2, #64]	@ 0x40
	UART->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos); //enable transmission and reception on uart
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <UartInit+0xc0>)
 8000666:	220c      	movs	r2, #12
 8000668:	60da      	str	r2, [r3, #12]
	UART->CR1 &= ~(BV(USART_CR1_M_Pos) | BV(USART_CR1_OVER8_Pos)); //set word length in CR1 ->M bit = 8 bit daat length,Over8=0
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <UartInit+0xc0>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <UartInit+0xc0>)
 8000670:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 8000674:	60d3      	str	r3, [r2, #12]
	UART->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1); //set stop bits in CR2=>1 stop bit
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <UartInit+0xc0>)
 8000678:	691b      	ldr	r3, [r3, #16]
 800067a:	4a16      	ldr	r2, [pc, #88]	@ (80006d4 <UartInit+0xc0>)
 800067c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000680:	6113      	str	r3, [r2, #16]

	//set baud rate
	if (baud == 9600) {
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000688:	d104      	bne.n	8000694 <UartInit+0x80>
		UART->BRR = UBRR_9600;
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <UartInit+0xc0>)
 800068c:	f240 6283 	movw	r2, #1667	@ 0x683
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	e00f      	b.n	80006b4 <UartInit+0xa0>
	} else if (baud == 38400) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800069a:	d104      	bne.n	80006a6 <UartInit+0x92>
		UART->BRR = UBRR_38400;
 800069c:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <UartInit+0xc0>)
 800069e:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	e006      	b.n	80006b4 <UartInit+0xa0>
	} else if (baud == 115200) {
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80006ac:	d102      	bne.n	80006b4 <UartInit+0xa0>
		UART->BRR = UBRR_115200;
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <UartInit+0xc0>)
 80006b0:	228b      	movs	r2, #139	@ 0x8b
 80006b2:	609a      	str	r2, [r3, #8]
	}
	UART->CR1 |= BV(USART_CR1_UE_Pos);
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <UartInit+0xc0>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <UartInit+0xc0>)
 80006ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006be:	60d3      	str	r3, [r2, #12]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40004400 	.word	0x40004400

080006d8 <UartPutch>:

void UartPutch(uint8_t ch) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	UART->DR = ch;
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <UartPutch+0x2c>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	6053      	str	r3, [r2, #4]
	while ((UART->SR & BV(USART_CR1_UE_Pos)) == 0)
 80006e8:	bf00      	nop
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <UartPutch+0x2c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <UartPutch+0x12>
		;
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40004400 	.word	0x40004400

08000708 <UartPuts>:

void UartPuts(char str[]) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]!='\0'; i++)
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	e009      	b.n	800072a <UartPuts+0x22>
			UartPutch((uint8_t)str[i]);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffda 	bl	80006d8 <UartPutch>
	for(int i=0; str[i]!='\0'; i++)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1ef      	bne.n	8000716 <UartPuts+0xe>

}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000740:	480d      	ldr	r0, [pc, #52]	@ (8000778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000742:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000744:	f7ff ff30 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490d      	ldr	r1, [pc, #52]	@ (8000780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0a      	ldr	r4, [pc, #40]	@ (800078c <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076e:	f000 f837 	bl	80007e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000772:	f7ff febb 	bl	80004ec <main>

08000776 <LoopForever>:

LoopForever:
  b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
  ldr   r0, =_estack
 8000778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000784:	0800112c 	.word	0x0800112c
  ldr r2, =_sbss
 8000788:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800078c:	200001bc 	.word	0x200001bc

08000790 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC_IRQHandler>
	...

08000794 <siprintf>:
 8000794:	b40e      	push	{r1, r2, r3}
 8000796:	b500      	push	{lr}
 8000798:	b09c      	sub	sp, #112	@ 0x70
 800079a:	ab1d      	add	r3, sp, #116	@ 0x74
 800079c:	9002      	str	r0, [sp, #8]
 800079e:	9006      	str	r0, [sp, #24]
 80007a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80007a4:	4809      	ldr	r0, [pc, #36]	@ (80007cc <siprintf+0x38>)
 80007a6:	9107      	str	r1, [sp, #28]
 80007a8:	9104      	str	r1, [sp, #16]
 80007aa:	4909      	ldr	r1, [pc, #36]	@ (80007d0 <siprintf+0x3c>)
 80007ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80007b0:	9105      	str	r1, [sp, #20]
 80007b2:	6800      	ldr	r0, [r0, #0]
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	a902      	add	r1, sp, #8
 80007b8:	f000 f98c 	bl	8000ad4 <_svfiprintf_r>
 80007bc:	9b02      	ldr	r3, [sp, #8]
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	b01c      	add	sp, #112	@ 0x70
 80007c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80007c8:	b003      	add	sp, #12
 80007ca:	4770      	bx	lr
 80007cc:	20000004 	.word	0x20000004
 80007d0:	ffff0208 	.word	0xffff0208

080007d4 <__errno>:
 80007d4:	4b01      	ldr	r3, [pc, #4]	@ (80007dc <__errno+0x8>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000004 	.word	0x20000004

080007e0 <__libc_init_array>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000818 <__libc_init_array+0x38>)
 80007e4:	4c0d      	ldr	r4, [pc, #52]	@ (800081c <__libc_init_array+0x3c>)
 80007e6:	1b64      	subs	r4, r4, r5
 80007e8:	10a4      	asrs	r4, r4, #2
 80007ea:	2600      	movs	r6, #0
 80007ec:	42a6      	cmp	r6, r4
 80007ee:	d109      	bne.n	8000804 <__libc_init_array+0x24>
 80007f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000820 <__libc_init_array+0x40>)
 80007f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000824 <__libc_init_array+0x44>)
 80007f4:	f000 fc66 	bl	80010c4 <_init>
 80007f8:	1b64      	subs	r4, r4, r5
 80007fa:	10a4      	asrs	r4, r4, #2
 80007fc:	2600      	movs	r6, #0
 80007fe:	42a6      	cmp	r6, r4
 8000800:	d105      	bne.n	800080e <__libc_init_array+0x2e>
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f855 3b04 	ldr.w	r3, [r5], #4
 8000808:	4798      	blx	r3
 800080a:	3601      	adds	r6, #1
 800080c:	e7ee      	b.n	80007ec <__libc_init_array+0xc>
 800080e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000812:	4798      	blx	r3
 8000814:	3601      	adds	r6, #1
 8000816:	e7f2      	b.n	80007fe <__libc_init_array+0x1e>
 8000818:	08001124 	.word	0x08001124
 800081c:	08001124 	.word	0x08001124
 8000820:	08001124 	.word	0x08001124
 8000824:	08001128 	.word	0x08001128

08000828 <__retarget_lock_acquire_recursive>:
 8000828:	4770      	bx	lr

0800082a <__retarget_lock_release_recursive>:
 800082a:	4770      	bx	lr

0800082c <_free_r>:
 800082c:	b538      	push	{r3, r4, r5, lr}
 800082e:	4605      	mov	r5, r0
 8000830:	2900      	cmp	r1, #0
 8000832:	d041      	beq.n	80008b8 <_free_r+0x8c>
 8000834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000838:	1f0c      	subs	r4, r1, #4
 800083a:	2b00      	cmp	r3, #0
 800083c:	bfb8      	it	lt
 800083e:	18e4      	addlt	r4, r4, r3
 8000840:	f000 f8e0 	bl	8000a04 <__malloc_lock>
 8000844:	4a1d      	ldr	r2, [pc, #116]	@ (80008bc <_free_r+0x90>)
 8000846:	6813      	ldr	r3, [r2, #0]
 8000848:	b933      	cbnz	r3, 8000858 <_free_r+0x2c>
 800084a:	6063      	str	r3, [r4, #4]
 800084c:	6014      	str	r4, [r2, #0]
 800084e:	4628      	mov	r0, r5
 8000850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000854:	f000 b8dc 	b.w	8000a10 <__malloc_unlock>
 8000858:	42a3      	cmp	r3, r4
 800085a:	d908      	bls.n	800086e <_free_r+0x42>
 800085c:	6820      	ldr	r0, [r4, #0]
 800085e:	1821      	adds	r1, r4, r0
 8000860:	428b      	cmp	r3, r1
 8000862:	bf01      	itttt	eq
 8000864:	6819      	ldreq	r1, [r3, #0]
 8000866:	685b      	ldreq	r3, [r3, #4]
 8000868:	1809      	addeq	r1, r1, r0
 800086a:	6021      	streq	r1, [r4, #0]
 800086c:	e7ed      	b.n	800084a <_free_r+0x1e>
 800086e:	461a      	mov	r2, r3
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	b10b      	cbz	r3, 8000878 <_free_r+0x4c>
 8000874:	42a3      	cmp	r3, r4
 8000876:	d9fa      	bls.n	800086e <_free_r+0x42>
 8000878:	6811      	ldr	r1, [r2, #0]
 800087a:	1850      	adds	r0, r2, r1
 800087c:	42a0      	cmp	r0, r4
 800087e:	d10b      	bne.n	8000898 <_free_r+0x6c>
 8000880:	6820      	ldr	r0, [r4, #0]
 8000882:	4401      	add	r1, r0
 8000884:	1850      	adds	r0, r2, r1
 8000886:	4283      	cmp	r3, r0
 8000888:	6011      	str	r1, [r2, #0]
 800088a:	d1e0      	bne.n	800084e <_free_r+0x22>
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	6053      	str	r3, [r2, #4]
 8000892:	4408      	add	r0, r1
 8000894:	6010      	str	r0, [r2, #0]
 8000896:	e7da      	b.n	800084e <_free_r+0x22>
 8000898:	d902      	bls.n	80008a0 <_free_r+0x74>
 800089a:	230c      	movs	r3, #12
 800089c:	602b      	str	r3, [r5, #0]
 800089e:	e7d6      	b.n	800084e <_free_r+0x22>
 80008a0:	6820      	ldr	r0, [r4, #0]
 80008a2:	1821      	adds	r1, r4, r0
 80008a4:	428b      	cmp	r3, r1
 80008a6:	bf04      	itt	eq
 80008a8:	6819      	ldreq	r1, [r3, #0]
 80008aa:	685b      	ldreq	r3, [r3, #4]
 80008ac:	6063      	str	r3, [r4, #4]
 80008ae:	bf04      	itt	eq
 80008b0:	1809      	addeq	r1, r1, r0
 80008b2:	6021      	streq	r1, [r4, #0]
 80008b4:	6054      	str	r4, [r2, #4]
 80008b6:	e7ca      	b.n	800084e <_free_r+0x22>
 80008b8:	bd38      	pop	{r3, r4, r5, pc}
 80008ba:	bf00      	nop
 80008bc:	200001b8 	.word	0x200001b8

080008c0 <sbrk_aligned>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	4e0f      	ldr	r6, [pc, #60]	@ (8000900 <sbrk_aligned+0x40>)
 80008c4:	460c      	mov	r4, r1
 80008c6:	6831      	ldr	r1, [r6, #0]
 80008c8:	4605      	mov	r5, r0
 80008ca:	b911      	cbnz	r1, 80008d2 <sbrk_aligned+0x12>
 80008cc:	f000 fba6 	bl	800101c <_sbrk_r>
 80008d0:	6030      	str	r0, [r6, #0]
 80008d2:	4621      	mov	r1, r4
 80008d4:	4628      	mov	r0, r5
 80008d6:	f000 fba1 	bl	800101c <_sbrk_r>
 80008da:	1c43      	adds	r3, r0, #1
 80008dc:	d103      	bne.n	80008e6 <sbrk_aligned+0x26>
 80008de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80008e2:	4620      	mov	r0, r4
 80008e4:	bd70      	pop	{r4, r5, r6, pc}
 80008e6:	1cc4      	adds	r4, r0, #3
 80008e8:	f024 0403 	bic.w	r4, r4, #3
 80008ec:	42a0      	cmp	r0, r4
 80008ee:	d0f8      	beq.n	80008e2 <sbrk_aligned+0x22>
 80008f0:	1a21      	subs	r1, r4, r0
 80008f2:	4628      	mov	r0, r5
 80008f4:	f000 fb92 	bl	800101c <_sbrk_r>
 80008f8:	3001      	adds	r0, #1
 80008fa:	d1f2      	bne.n	80008e2 <sbrk_aligned+0x22>
 80008fc:	e7ef      	b.n	80008de <sbrk_aligned+0x1e>
 80008fe:	bf00      	nop
 8000900:	200001b4 	.word	0x200001b4

08000904 <_malloc_r>:
 8000904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000908:	1ccd      	adds	r5, r1, #3
 800090a:	f025 0503 	bic.w	r5, r5, #3
 800090e:	3508      	adds	r5, #8
 8000910:	2d0c      	cmp	r5, #12
 8000912:	bf38      	it	cc
 8000914:	250c      	movcc	r5, #12
 8000916:	2d00      	cmp	r5, #0
 8000918:	4606      	mov	r6, r0
 800091a:	db01      	blt.n	8000920 <_malloc_r+0x1c>
 800091c:	42a9      	cmp	r1, r5
 800091e:	d904      	bls.n	800092a <_malloc_r+0x26>
 8000920:	230c      	movs	r3, #12
 8000922:	6033      	str	r3, [r6, #0]
 8000924:	2000      	movs	r0, #0
 8000926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800092a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a00 <_malloc_r+0xfc>
 800092e:	f000 f869 	bl	8000a04 <__malloc_lock>
 8000932:	f8d8 3000 	ldr.w	r3, [r8]
 8000936:	461c      	mov	r4, r3
 8000938:	bb44      	cbnz	r4, 800098c <_malloc_r+0x88>
 800093a:	4629      	mov	r1, r5
 800093c:	4630      	mov	r0, r6
 800093e:	f7ff ffbf 	bl	80008c0 <sbrk_aligned>
 8000942:	1c43      	adds	r3, r0, #1
 8000944:	4604      	mov	r4, r0
 8000946:	d158      	bne.n	80009fa <_malloc_r+0xf6>
 8000948:	f8d8 4000 	ldr.w	r4, [r8]
 800094c:	4627      	mov	r7, r4
 800094e:	2f00      	cmp	r7, #0
 8000950:	d143      	bne.n	80009da <_malloc_r+0xd6>
 8000952:	2c00      	cmp	r4, #0
 8000954:	d04b      	beq.n	80009ee <_malloc_r+0xea>
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	4639      	mov	r1, r7
 800095a:	4630      	mov	r0, r6
 800095c:	eb04 0903 	add.w	r9, r4, r3
 8000960:	f000 fb5c 	bl	800101c <_sbrk_r>
 8000964:	4581      	cmp	r9, r0
 8000966:	d142      	bne.n	80009ee <_malloc_r+0xea>
 8000968:	6821      	ldr	r1, [r4, #0]
 800096a:	1a6d      	subs	r5, r5, r1
 800096c:	4629      	mov	r1, r5
 800096e:	4630      	mov	r0, r6
 8000970:	f7ff ffa6 	bl	80008c0 <sbrk_aligned>
 8000974:	3001      	adds	r0, #1
 8000976:	d03a      	beq.n	80009ee <_malloc_r+0xea>
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	442b      	add	r3, r5
 800097c:	6023      	str	r3, [r4, #0]
 800097e:	f8d8 3000 	ldr.w	r3, [r8]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	bb62      	cbnz	r2, 80009e0 <_malloc_r+0xdc>
 8000986:	f8c8 7000 	str.w	r7, [r8]
 800098a:	e00f      	b.n	80009ac <_malloc_r+0xa8>
 800098c:	6822      	ldr	r2, [r4, #0]
 800098e:	1b52      	subs	r2, r2, r5
 8000990:	d420      	bmi.n	80009d4 <_malloc_r+0xd0>
 8000992:	2a0b      	cmp	r2, #11
 8000994:	d917      	bls.n	80009c6 <_malloc_r+0xc2>
 8000996:	1961      	adds	r1, r4, r5
 8000998:	42a3      	cmp	r3, r4
 800099a:	6025      	str	r5, [r4, #0]
 800099c:	bf18      	it	ne
 800099e:	6059      	strne	r1, [r3, #4]
 80009a0:	6863      	ldr	r3, [r4, #4]
 80009a2:	bf08      	it	eq
 80009a4:	f8c8 1000 	streq.w	r1, [r8]
 80009a8:	5162      	str	r2, [r4, r5]
 80009aa:	604b      	str	r3, [r1, #4]
 80009ac:	4630      	mov	r0, r6
 80009ae:	f000 f82f 	bl	8000a10 <__malloc_unlock>
 80009b2:	f104 000b 	add.w	r0, r4, #11
 80009b6:	1d23      	adds	r3, r4, #4
 80009b8:	f020 0007 	bic.w	r0, r0, #7
 80009bc:	1ac2      	subs	r2, r0, r3
 80009be:	bf1c      	itt	ne
 80009c0:	1a1b      	subne	r3, r3, r0
 80009c2:	50a3      	strne	r3, [r4, r2]
 80009c4:	e7af      	b.n	8000926 <_malloc_r+0x22>
 80009c6:	6862      	ldr	r2, [r4, #4]
 80009c8:	42a3      	cmp	r3, r4
 80009ca:	bf0c      	ite	eq
 80009cc:	f8c8 2000 	streq.w	r2, [r8]
 80009d0:	605a      	strne	r2, [r3, #4]
 80009d2:	e7eb      	b.n	80009ac <_malloc_r+0xa8>
 80009d4:	4623      	mov	r3, r4
 80009d6:	6864      	ldr	r4, [r4, #4]
 80009d8:	e7ae      	b.n	8000938 <_malloc_r+0x34>
 80009da:	463c      	mov	r4, r7
 80009dc:	687f      	ldr	r7, [r7, #4]
 80009de:	e7b6      	b.n	800094e <_malloc_r+0x4a>
 80009e0:	461a      	mov	r2, r3
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	42a3      	cmp	r3, r4
 80009e6:	d1fb      	bne.n	80009e0 <_malloc_r+0xdc>
 80009e8:	2300      	movs	r3, #0
 80009ea:	6053      	str	r3, [r2, #4]
 80009ec:	e7de      	b.n	80009ac <_malloc_r+0xa8>
 80009ee:	230c      	movs	r3, #12
 80009f0:	6033      	str	r3, [r6, #0]
 80009f2:	4630      	mov	r0, r6
 80009f4:	f000 f80c 	bl	8000a10 <__malloc_unlock>
 80009f8:	e794      	b.n	8000924 <_malloc_r+0x20>
 80009fa:	6005      	str	r5, [r0, #0]
 80009fc:	e7d6      	b.n	80009ac <_malloc_r+0xa8>
 80009fe:	bf00      	nop
 8000a00:	200001b8 	.word	0x200001b8

08000a04 <__malloc_lock>:
 8000a04:	4801      	ldr	r0, [pc, #4]	@ (8000a0c <__malloc_lock+0x8>)
 8000a06:	f7ff bf0f 	b.w	8000828 <__retarget_lock_acquire_recursive>
 8000a0a:	bf00      	nop
 8000a0c:	200001b0 	.word	0x200001b0

08000a10 <__malloc_unlock>:
 8000a10:	4801      	ldr	r0, [pc, #4]	@ (8000a18 <__malloc_unlock+0x8>)
 8000a12:	f7ff bf0a 	b.w	800082a <__retarget_lock_release_recursive>
 8000a16:	bf00      	nop
 8000a18:	200001b0 	.word	0x200001b0

08000a1c <__ssputs_r>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	688e      	ldr	r6, [r1, #8]
 8000a22:	461f      	mov	r7, r3
 8000a24:	42be      	cmp	r6, r7
 8000a26:	680b      	ldr	r3, [r1, #0]
 8000a28:	4682      	mov	sl, r0
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	d82d      	bhi.n	8000a8c <__ssputs_r+0x70>
 8000a30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a38:	d026      	beq.n	8000a88 <__ssputs_r+0x6c>
 8000a3a:	6965      	ldr	r5, [r4, #20]
 8000a3c:	6909      	ldr	r1, [r1, #16]
 8000a3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a42:	eba3 0901 	sub.w	r9, r3, r1
 8000a46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a4a:	1c7b      	adds	r3, r7, #1
 8000a4c:	444b      	add	r3, r9
 8000a4e:	106d      	asrs	r5, r5, #1
 8000a50:	429d      	cmp	r5, r3
 8000a52:	bf38      	it	cc
 8000a54:	461d      	movcc	r5, r3
 8000a56:	0553      	lsls	r3, r2, #21
 8000a58:	d527      	bpl.n	8000aaa <__ssputs_r+0x8e>
 8000a5a:	4629      	mov	r1, r5
 8000a5c:	f7ff ff52 	bl	8000904 <_malloc_r>
 8000a60:	4606      	mov	r6, r0
 8000a62:	b360      	cbz	r0, 8000abe <__ssputs_r+0xa2>
 8000a64:	6921      	ldr	r1, [r4, #16]
 8000a66:	464a      	mov	r2, r9
 8000a68:	f000 fae8 	bl	800103c <memcpy>
 8000a6c:	89a3      	ldrh	r3, [r4, #12]
 8000a6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a76:	81a3      	strh	r3, [r4, #12]
 8000a78:	6126      	str	r6, [r4, #16]
 8000a7a:	6165      	str	r5, [r4, #20]
 8000a7c:	444e      	add	r6, r9
 8000a7e:	eba5 0509 	sub.w	r5, r5, r9
 8000a82:	6026      	str	r6, [r4, #0]
 8000a84:	60a5      	str	r5, [r4, #8]
 8000a86:	463e      	mov	r6, r7
 8000a88:	42be      	cmp	r6, r7
 8000a8a:	d900      	bls.n	8000a8e <__ssputs_r+0x72>
 8000a8c:	463e      	mov	r6, r7
 8000a8e:	6820      	ldr	r0, [r4, #0]
 8000a90:	4632      	mov	r2, r6
 8000a92:	4641      	mov	r1, r8
 8000a94:	f000 faa8 	bl	8000fe8 <memmove>
 8000a98:	68a3      	ldr	r3, [r4, #8]
 8000a9a:	1b9b      	subs	r3, r3, r6
 8000a9c:	60a3      	str	r3, [r4, #8]
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	4433      	add	r3, r6
 8000aa2:	6023      	str	r3, [r4, #0]
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aaa:	462a      	mov	r2, r5
 8000aac:	f000 fad4 	bl	8001058 <_realloc_r>
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d1e0      	bne.n	8000a78 <__ssputs_r+0x5c>
 8000ab6:	6921      	ldr	r1, [r4, #16]
 8000ab8:	4650      	mov	r0, sl
 8000aba:	f7ff feb7 	bl	800082c <_free_r>
 8000abe:	230c      	movs	r3, #12
 8000ac0:	f8ca 3000 	str.w	r3, [sl]
 8000ac4:	89a3      	ldrh	r3, [r4, #12]
 8000ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aca:	81a3      	strh	r3, [r4, #12]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ad0:	e7e9      	b.n	8000aa6 <__ssputs_r+0x8a>
	...

08000ad4 <_svfiprintf_r>:
 8000ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad8:	4698      	mov	r8, r3
 8000ada:	898b      	ldrh	r3, [r1, #12]
 8000adc:	061b      	lsls	r3, r3, #24
 8000ade:	b09d      	sub	sp, #116	@ 0x74
 8000ae0:	4607      	mov	r7, r0
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4614      	mov	r4, r2
 8000ae6:	d510      	bpl.n	8000b0a <_svfiprintf_r+0x36>
 8000ae8:	690b      	ldr	r3, [r1, #16]
 8000aea:	b973      	cbnz	r3, 8000b0a <_svfiprintf_r+0x36>
 8000aec:	2140      	movs	r1, #64	@ 0x40
 8000aee:	f7ff ff09 	bl	8000904 <_malloc_r>
 8000af2:	6028      	str	r0, [r5, #0]
 8000af4:	6128      	str	r0, [r5, #16]
 8000af6:	b930      	cbnz	r0, 8000b06 <_svfiprintf_r+0x32>
 8000af8:	230c      	movs	r3, #12
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b00:	b01d      	add	sp, #116	@ 0x74
 8000b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b06:	2340      	movs	r3, #64	@ 0x40
 8000b08:	616b      	str	r3, [r5, #20]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b0e:	2320      	movs	r3, #32
 8000b10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b14:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b18:	2330      	movs	r3, #48	@ 0x30
 8000b1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000cb8 <_svfiprintf_r+0x1e4>
 8000b1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b22:	f04f 0901 	mov.w	r9, #1
 8000b26:	4623      	mov	r3, r4
 8000b28:	469a      	mov	sl, r3
 8000b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b2e:	b10a      	cbz	r2, 8000b34 <_svfiprintf_r+0x60>
 8000b30:	2a25      	cmp	r2, #37	@ 0x25
 8000b32:	d1f9      	bne.n	8000b28 <_svfiprintf_r+0x54>
 8000b34:	ebba 0b04 	subs.w	fp, sl, r4
 8000b38:	d00b      	beq.n	8000b52 <_svfiprintf_r+0x7e>
 8000b3a:	465b      	mov	r3, fp
 8000b3c:	4622      	mov	r2, r4
 8000b3e:	4629      	mov	r1, r5
 8000b40:	4638      	mov	r0, r7
 8000b42:	f7ff ff6b 	bl	8000a1c <__ssputs_r>
 8000b46:	3001      	adds	r0, #1
 8000b48:	f000 80a7 	beq.w	8000c9a <_svfiprintf_r+0x1c6>
 8000b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b4e:	445a      	add	r2, fp
 8000b50:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b52:	f89a 3000 	ldrb.w	r3, [sl]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 809f 	beq.w	8000c9a <_svfiprintf_r+0x1c6>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b66:	f10a 0a01 	add.w	sl, sl, #1
 8000b6a:	9304      	str	r3, [sp, #16]
 8000b6c:	9307      	str	r3, [sp, #28]
 8000b6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b72:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b74:	4654      	mov	r4, sl
 8000b76:	2205      	movs	r2, #5
 8000b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b7c:	484e      	ldr	r0, [pc, #312]	@ (8000cb8 <_svfiprintf_r+0x1e4>)
 8000b7e:	f7ff fb27 	bl	80001d0 <memchr>
 8000b82:	9a04      	ldr	r2, [sp, #16]
 8000b84:	b9d8      	cbnz	r0, 8000bbe <_svfiprintf_r+0xea>
 8000b86:	06d0      	lsls	r0, r2, #27
 8000b88:	bf44      	itt	mi
 8000b8a:	2320      	movmi	r3, #32
 8000b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b90:	0711      	lsls	r1, r2, #28
 8000b92:	bf44      	itt	mi
 8000b94:	232b      	movmi	r3, #43	@ 0x2b
 8000b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ba0:	d015      	beq.n	8000bce <_svfiprintf_r+0xfa>
 8000ba2:	9a07      	ldr	r2, [sp, #28]
 8000ba4:	4654      	mov	r4, sl
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f04f 0c0a 	mov.w	ip, #10
 8000bac:	4621      	mov	r1, r4
 8000bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bb2:	3b30      	subs	r3, #48	@ 0x30
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	d94b      	bls.n	8000c50 <_svfiprintf_r+0x17c>
 8000bb8:	b1b0      	cbz	r0, 8000be8 <_svfiprintf_r+0x114>
 8000bba:	9207      	str	r2, [sp, #28]
 8000bbc:	e014      	b.n	8000be8 <_svfiprintf_r+0x114>
 8000bbe:	eba0 0308 	sub.w	r3, r0, r8
 8000bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	9304      	str	r3, [sp, #16]
 8000bca:	46a2      	mov	sl, r4
 8000bcc:	e7d2      	b.n	8000b74 <_svfiprintf_r+0xa0>
 8000bce:	9b03      	ldr	r3, [sp, #12]
 8000bd0:	1d19      	adds	r1, r3, #4
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	9103      	str	r1, [sp, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bfbb      	ittet	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8000be0:	9307      	strge	r3, [sp, #28]
 8000be2:	9307      	strlt	r3, [sp, #28]
 8000be4:	bfb8      	it	lt
 8000be6:	9204      	strlt	r2, [sp, #16]
 8000be8:	7823      	ldrb	r3, [r4, #0]
 8000bea:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bec:	d10a      	bne.n	8000c04 <_svfiprintf_r+0x130>
 8000bee:	7863      	ldrb	r3, [r4, #1]
 8000bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bf2:	d132      	bne.n	8000c5a <_svfiprintf_r+0x186>
 8000bf4:	9b03      	ldr	r3, [sp, #12]
 8000bf6:	1d1a      	adds	r2, r3, #4
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	9203      	str	r2, [sp, #12]
 8000bfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c00:	3402      	adds	r4, #2
 8000c02:	9305      	str	r3, [sp, #20]
 8000c04:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000cbc <_svfiprintf_r+0x1e8>
 8000c08:	7821      	ldrb	r1, [r4, #0]
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	4650      	mov	r0, sl
 8000c0e:	f7ff fadf 	bl	80001d0 <memchr>
 8000c12:	b138      	cbz	r0, 8000c24 <_svfiprintf_r+0x150>
 8000c14:	9b04      	ldr	r3, [sp, #16]
 8000c16:	eba0 000a 	sub.w	r0, r0, sl
 8000c1a:	2240      	movs	r2, #64	@ 0x40
 8000c1c:	4082      	lsls	r2, r0
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	3401      	adds	r4, #1
 8000c22:	9304      	str	r3, [sp, #16]
 8000c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c28:	4825      	ldr	r0, [pc, #148]	@ (8000cc0 <_svfiprintf_r+0x1ec>)
 8000c2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c2e:	2206      	movs	r2, #6
 8000c30:	f7ff face 	bl	80001d0 <memchr>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d036      	beq.n	8000ca6 <_svfiprintf_r+0x1d2>
 8000c38:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <_svfiprintf_r+0x1f0>)
 8000c3a:	bb1b      	cbnz	r3, 8000c84 <_svfiprintf_r+0x1b0>
 8000c3c:	9b03      	ldr	r3, [sp, #12]
 8000c3e:	3307      	adds	r3, #7
 8000c40:	f023 0307 	bic.w	r3, r3, #7
 8000c44:	3308      	adds	r3, #8
 8000c46:	9303      	str	r3, [sp, #12]
 8000c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c4a:	4433      	add	r3, r6
 8000c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c4e:	e76a      	b.n	8000b26 <_svfiprintf_r+0x52>
 8000c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c54:	460c      	mov	r4, r1
 8000c56:	2001      	movs	r0, #1
 8000c58:	e7a8      	b.n	8000bac <_svfiprintf_r+0xd8>
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	3401      	adds	r4, #1
 8000c5e:	9305      	str	r3, [sp, #20]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 0c0a 	mov.w	ip, #10
 8000c66:	4620      	mov	r0, r4
 8000c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c6c:	3a30      	subs	r2, #48	@ 0x30
 8000c6e:	2a09      	cmp	r2, #9
 8000c70:	d903      	bls.n	8000c7a <_svfiprintf_r+0x1a6>
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0c6      	beq.n	8000c04 <_svfiprintf_r+0x130>
 8000c76:	9105      	str	r1, [sp, #20]
 8000c78:	e7c4      	b.n	8000c04 <_svfiprintf_r+0x130>
 8000c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c7e:	4604      	mov	r4, r0
 8000c80:	2301      	movs	r3, #1
 8000c82:	e7f0      	b.n	8000c66 <_svfiprintf_r+0x192>
 8000c84:	ab03      	add	r3, sp, #12
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	462a      	mov	r2, r5
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <_svfiprintf_r+0x1f4>)
 8000c8c:	a904      	add	r1, sp, #16
 8000c8e:	4638      	mov	r0, r7
 8000c90:	f3af 8000 	nop.w
 8000c94:	1c42      	adds	r2, r0, #1
 8000c96:	4606      	mov	r6, r0
 8000c98:	d1d6      	bne.n	8000c48 <_svfiprintf_r+0x174>
 8000c9a:	89ab      	ldrh	r3, [r5, #12]
 8000c9c:	065b      	lsls	r3, r3, #25
 8000c9e:	f53f af2d 	bmi.w	8000afc <_svfiprintf_r+0x28>
 8000ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ca4:	e72c      	b.n	8000b00 <_svfiprintf_r+0x2c>
 8000ca6:	ab03      	add	r3, sp, #12
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	462a      	mov	r2, r5
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <_svfiprintf_r+0x1f4>)
 8000cae:	a904      	add	r1, sp, #16
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	f000 f879 	bl	8000da8 <_printf_i>
 8000cb6:	e7ed      	b.n	8000c94 <_svfiprintf_r+0x1c0>
 8000cb8:	080010e7 	.word	0x080010e7
 8000cbc:	080010ed 	.word	0x080010ed
 8000cc0:	080010f1 	.word	0x080010f1
 8000cc4:	00000000 	.word	0x00000000
 8000cc8:	08000a1d 	.word	0x08000a1d

08000ccc <_printf_common>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	4616      	mov	r6, r2
 8000cd2:	4698      	mov	r8, r3
 8000cd4:	688a      	ldr	r2, [r1, #8]
 8000cd6:	690b      	ldr	r3, [r1, #16]
 8000cd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	bfb8      	it	lt
 8000ce0:	4613      	movlt	r3, r2
 8000ce2:	6033      	str	r3, [r6, #0]
 8000ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ce8:	4607      	mov	r7, r0
 8000cea:	460c      	mov	r4, r1
 8000cec:	b10a      	cbz	r2, 8000cf2 <_printf_common+0x26>
 8000cee:	3301      	adds	r3, #1
 8000cf0:	6033      	str	r3, [r6, #0]
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	0699      	lsls	r1, r3, #26
 8000cf6:	bf42      	ittt	mi
 8000cf8:	6833      	ldrmi	r3, [r6, #0]
 8000cfa:	3302      	addmi	r3, #2
 8000cfc:	6033      	strmi	r3, [r6, #0]
 8000cfe:	6825      	ldr	r5, [r4, #0]
 8000d00:	f015 0506 	ands.w	r5, r5, #6
 8000d04:	d106      	bne.n	8000d14 <_printf_common+0x48>
 8000d06:	f104 0a19 	add.w	sl, r4, #25
 8000d0a:	68e3      	ldr	r3, [r4, #12]
 8000d0c:	6832      	ldr	r2, [r6, #0]
 8000d0e:	1a9b      	subs	r3, r3, r2
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	dc26      	bgt.n	8000d62 <_printf_common+0x96>
 8000d14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d18:	6822      	ldr	r2, [r4, #0]
 8000d1a:	3b00      	subs	r3, #0
 8000d1c:	bf18      	it	ne
 8000d1e:	2301      	movne	r3, #1
 8000d20:	0692      	lsls	r2, r2, #26
 8000d22:	d42b      	bmi.n	8000d7c <_printf_common+0xb0>
 8000d24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d28:	4641      	mov	r1, r8
 8000d2a:	4638      	mov	r0, r7
 8000d2c:	47c8      	blx	r9
 8000d2e:	3001      	adds	r0, #1
 8000d30:	d01e      	beq.n	8000d70 <_printf_common+0xa4>
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	6922      	ldr	r2, [r4, #16]
 8000d36:	f003 0306 	and.w	r3, r3, #6
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf02      	ittt	eq
 8000d3e:	68e5      	ldreq	r5, [r4, #12]
 8000d40:	6833      	ldreq	r3, [r6, #0]
 8000d42:	1aed      	subeq	r5, r5, r3
 8000d44:	68a3      	ldr	r3, [r4, #8]
 8000d46:	bf0c      	ite	eq
 8000d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d4c:	2500      	movne	r5, #0
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	bfc4      	itt	gt
 8000d52:	1a9b      	subgt	r3, r3, r2
 8000d54:	18ed      	addgt	r5, r5, r3
 8000d56:	2600      	movs	r6, #0
 8000d58:	341a      	adds	r4, #26
 8000d5a:	42b5      	cmp	r5, r6
 8000d5c:	d11a      	bne.n	8000d94 <_printf_common+0xc8>
 8000d5e:	2000      	movs	r0, #0
 8000d60:	e008      	b.n	8000d74 <_printf_common+0xa8>
 8000d62:	2301      	movs	r3, #1
 8000d64:	4652      	mov	r2, sl
 8000d66:	4641      	mov	r1, r8
 8000d68:	4638      	mov	r0, r7
 8000d6a:	47c8      	blx	r9
 8000d6c:	3001      	adds	r0, #1
 8000d6e:	d103      	bne.n	8000d78 <_printf_common+0xac>
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	3501      	adds	r5, #1
 8000d7a:	e7c6      	b.n	8000d0a <_printf_common+0x3e>
 8000d7c:	18e1      	adds	r1, r4, r3
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	2030      	movs	r0, #48	@ 0x30
 8000d82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d86:	4422      	add	r2, r4
 8000d88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d90:	3302      	adds	r3, #2
 8000d92:	e7c7      	b.n	8000d24 <_printf_common+0x58>
 8000d94:	2301      	movs	r3, #1
 8000d96:	4622      	mov	r2, r4
 8000d98:	4641      	mov	r1, r8
 8000d9a:	4638      	mov	r0, r7
 8000d9c:	47c8      	blx	r9
 8000d9e:	3001      	adds	r0, #1
 8000da0:	d0e6      	beq.n	8000d70 <_printf_common+0xa4>
 8000da2:	3601      	adds	r6, #1
 8000da4:	e7d9      	b.n	8000d5a <_printf_common+0x8e>
	...

08000da8 <_printf_i>:
 8000da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dac:	7e0f      	ldrb	r7, [r1, #24]
 8000dae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000db0:	2f78      	cmp	r7, #120	@ 0x78
 8000db2:	4691      	mov	r9, r2
 8000db4:	4680      	mov	r8, r0
 8000db6:	460c      	mov	r4, r1
 8000db8:	469a      	mov	sl, r3
 8000dba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dbe:	d807      	bhi.n	8000dd0 <_printf_i+0x28>
 8000dc0:	2f62      	cmp	r7, #98	@ 0x62
 8000dc2:	d80a      	bhi.n	8000dda <_printf_i+0x32>
 8000dc4:	2f00      	cmp	r7, #0
 8000dc6:	f000 80d2 	beq.w	8000f6e <_printf_i+0x1c6>
 8000dca:	2f58      	cmp	r7, #88	@ 0x58
 8000dcc:	f000 80b9 	beq.w	8000f42 <_printf_i+0x19a>
 8000dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000dd8:	e03a      	b.n	8000e50 <_printf_i+0xa8>
 8000dda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000dde:	2b15      	cmp	r3, #21
 8000de0:	d8f6      	bhi.n	8000dd0 <_printf_i+0x28>
 8000de2:	a101      	add	r1, pc, #4	@ (adr r1, 8000de8 <_printf_i+0x40>)
 8000de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000de8:	08000e41 	.word	0x08000e41
 8000dec:	08000e55 	.word	0x08000e55
 8000df0:	08000dd1 	.word	0x08000dd1
 8000df4:	08000dd1 	.word	0x08000dd1
 8000df8:	08000dd1 	.word	0x08000dd1
 8000dfc:	08000dd1 	.word	0x08000dd1
 8000e00:	08000e55 	.word	0x08000e55
 8000e04:	08000dd1 	.word	0x08000dd1
 8000e08:	08000dd1 	.word	0x08000dd1
 8000e0c:	08000dd1 	.word	0x08000dd1
 8000e10:	08000dd1 	.word	0x08000dd1
 8000e14:	08000f55 	.word	0x08000f55
 8000e18:	08000e7f 	.word	0x08000e7f
 8000e1c:	08000f0f 	.word	0x08000f0f
 8000e20:	08000dd1 	.word	0x08000dd1
 8000e24:	08000dd1 	.word	0x08000dd1
 8000e28:	08000f77 	.word	0x08000f77
 8000e2c:	08000dd1 	.word	0x08000dd1
 8000e30:	08000e7f 	.word	0x08000e7f
 8000e34:	08000dd1 	.word	0x08000dd1
 8000e38:	08000dd1 	.word	0x08000dd1
 8000e3c:	08000f17 	.word	0x08000f17
 8000e40:	6833      	ldr	r3, [r6, #0]
 8000e42:	1d1a      	adds	r2, r3, #4
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6032      	str	r2, [r6, #0]
 8000e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e50:	2301      	movs	r3, #1
 8000e52:	e09d      	b.n	8000f90 <_printf_i+0x1e8>
 8000e54:	6833      	ldr	r3, [r6, #0]
 8000e56:	6820      	ldr	r0, [r4, #0]
 8000e58:	1d19      	adds	r1, r3, #4
 8000e5a:	6031      	str	r1, [r6, #0]
 8000e5c:	0606      	lsls	r6, r0, #24
 8000e5e:	d501      	bpl.n	8000e64 <_printf_i+0xbc>
 8000e60:	681d      	ldr	r5, [r3, #0]
 8000e62:	e003      	b.n	8000e6c <_printf_i+0xc4>
 8000e64:	0645      	lsls	r5, r0, #25
 8000e66:	d5fb      	bpl.n	8000e60 <_printf_i+0xb8>
 8000e68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e6c:	2d00      	cmp	r5, #0
 8000e6e:	da03      	bge.n	8000e78 <_printf_i+0xd0>
 8000e70:	232d      	movs	r3, #45	@ 0x2d
 8000e72:	426d      	negs	r5, r5
 8000e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e78:	4859      	ldr	r0, [pc, #356]	@ (8000fe0 <_printf_i+0x238>)
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	e011      	b.n	8000ea2 <_printf_i+0xfa>
 8000e7e:	6821      	ldr	r1, [r4, #0]
 8000e80:	6833      	ldr	r3, [r6, #0]
 8000e82:	0608      	lsls	r0, r1, #24
 8000e84:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e88:	d402      	bmi.n	8000e90 <_printf_i+0xe8>
 8000e8a:	0649      	lsls	r1, r1, #25
 8000e8c:	bf48      	it	mi
 8000e8e:	b2ad      	uxthmi	r5, r5
 8000e90:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e92:	4853      	ldr	r0, [pc, #332]	@ (8000fe0 <_printf_i+0x238>)
 8000e94:	6033      	str	r3, [r6, #0]
 8000e96:	bf14      	ite	ne
 8000e98:	230a      	movne	r3, #10
 8000e9a:	2308      	moveq	r3, #8
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000ea2:	6866      	ldr	r6, [r4, #4]
 8000ea4:	60a6      	str	r6, [r4, #8]
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	bfa2      	ittt	ge
 8000eaa:	6821      	ldrge	r1, [r4, #0]
 8000eac:	f021 0104 	bicge.w	r1, r1, #4
 8000eb0:	6021      	strge	r1, [r4, #0]
 8000eb2:	b90d      	cbnz	r5, 8000eb8 <_printf_i+0x110>
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d04b      	beq.n	8000f50 <_printf_i+0x1a8>
 8000eb8:	4616      	mov	r6, r2
 8000eba:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ebe:	fb03 5711 	mls	r7, r3, r1, r5
 8000ec2:	5dc7      	ldrb	r7, [r0, r7]
 8000ec4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ec8:	462f      	mov	r7, r5
 8000eca:	42bb      	cmp	r3, r7
 8000ecc:	460d      	mov	r5, r1
 8000ece:	d9f4      	bls.n	8000eba <_printf_i+0x112>
 8000ed0:	2b08      	cmp	r3, #8
 8000ed2:	d10b      	bne.n	8000eec <_printf_i+0x144>
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	07df      	lsls	r7, r3, #31
 8000ed8:	d508      	bpl.n	8000eec <_printf_i+0x144>
 8000eda:	6923      	ldr	r3, [r4, #16]
 8000edc:	6861      	ldr	r1, [r4, #4]
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	bfde      	ittt	le
 8000ee2:	2330      	movle	r3, #48	@ 0x30
 8000ee4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000ee8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000eec:	1b92      	subs	r2, r2, r6
 8000eee:	6122      	str	r2, [r4, #16]
 8000ef0:	f8cd a000 	str.w	sl, [sp]
 8000ef4:	464b      	mov	r3, r9
 8000ef6:	aa03      	add	r2, sp, #12
 8000ef8:	4621      	mov	r1, r4
 8000efa:	4640      	mov	r0, r8
 8000efc:	f7ff fee6 	bl	8000ccc <_printf_common>
 8000f00:	3001      	adds	r0, #1
 8000f02:	d14a      	bne.n	8000f9a <_printf_i+0x1f2>
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f08:	b004      	add	sp, #16
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	6023      	str	r3, [r4, #0]
 8000f16:	4833      	ldr	r0, [pc, #204]	@ (8000fe4 <_printf_i+0x23c>)
 8000f18:	2778      	movs	r7, #120	@ 0x78
 8000f1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	6831      	ldr	r1, [r6, #0]
 8000f22:	061f      	lsls	r7, r3, #24
 8000f24:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f28:	d402      	bmi.n	8000f30 <_printf_i+0x188>
 8000f2a:	065f      	lsls	r7, r3, #25
 8000f2c:	bf48      	it	mi
 8000f2e:	b2ad      	uxthmi	r5, r5
 8000f30:	6031      	str	r1, [r6, #0]
 8000f32:	07d9      	lsls	r1, r3, #31
 8000f34:	bf44      	itt	mi
 8000f36:	f043 0320 	orrmi.w	r3, r3, #32
 8000f3a:	6023      	strmi	r3, [r4, #0]
 8000f3c:	b11d      	cbz	r5, 8000f46 <_printf_i+0x19e>
 8000f3e:	2310      	movs	r3, #16
 8000f40:	e7ac      	b.n	8000e9c <_printf_i+0xf4>
 8000f42:	4827      	ldr	r0, [pc, #156]	@ (8000fe0 <_printf_i+0x238>)
 8000f44:	e7e9      	b.n	8000f1a <_printf_i+0x172>
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	f023 0320 	bic.w	r3, r3, #32
 8000f4c:	6023      	str	r3, [r4, #0]
 8000f4e:	e7f6      	b.n	8000f3e <_printf_i+0x196>
 8000f50:	4616      	mov	r6, r2
 8000f52:	e7bd      	b.n	8000ed0 <_printf_i+0x128>
 8000f54:	6833      	ldr	r3, [r6, #0]
 8000f56:	6825      	ldr	r5, [r4, #0]
 8000f58:	6961      	ldr	r1, [r4, #20]
 8000f5a:	1d18      	adds	r0, r3, #4
 8000f5c:	6030      	str	r0, [r6, #0]
 8000f5e:	062e      	lsls	r6, r5, #24
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	d501      	bpl.n	8000f68 <_printf_i+0x1c0>
 8000f64:	6019      	str	r1, [r3, #0]
 8000f66:	e002      	b.n	8000f6e <_printf_i+0x1c6>
 8000f68:	0668      	lsls	r0, r5, #25
 8000f6a:	d5fb      	bpl.n	8000f64 <_printf_i+0x1bc>
 8000f6c:	8019      	strh	r1, [r3, #0]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	6123      	str	r3, [r4, #16]
 8000f72:	4616      	mov	r6, r2
 8000f74:	e7bc      	b.n	8000ef0 <_printf_i+0x148>
 8000f76:	6833      	ldr	r3, [r6, #0]
 8000f78:	1d1a      	adds	r2, r3, #4
 8000f7a:	6032      	str	r2, [r6, #0]
 8000f7c:	681e      	ldr	r6, [r3, #0]
 8000f7e:	6862      	ldr	r2, [r4, #4]
 8000f80:	2100      	movs	r1, #0
 8000f82:	4630      	mov	r0, r6
 8000f84:	f7ff f924 	bl	80001d0 <memchr>
 8000f88:	b108      	cbz	r0, 8000f8e <_printf_i+0x1e6>
 8000f8a:	1b80      	subs	r0, r0, r6
 8000f8c:	6060      	str	r0, [r4, #4]
 8000f8e:	6863      	ldr	r3, [r4, #4]
 8000f90:	6123      	str	r3, [r4, #16]
 8000f92:	2300      	movs	r3, #0
 8000f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f98:	e7aa      	b.n	8000ef0 <_printf_i+0x148>
 8000f9a:	6923      	ldr	r3, [r4, #16]
 8000f9c:	4632      	mov	r2, r6
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	47d0      	blx	sl
 8000fa4:	3001      	adds	r0, #1
 8000fa6:	d0ad      	beq.n	8000f04 <_printf_i+0x15c>
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	079b      	lsls	r3, r3, #30
 8000fac:	d413      	bmi.n	8000fd6 <_printf_i+0x22e>
 8000fae:	68e0      	ldr	r0, [r4, #12]
 8000fb0:	9b03      	ldr	r3, [sp, #12]
 8000fb2:	4298      	cmp	r0, r3
 8000fb4:	bfb8      	it	lt
 8000fb6:	4618      	movlt	r0, r3
 8000fb8:	e7a6      	b.n	8000f08 <_printf_i+0x160>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4632      	mov	r2, r6
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	47d0      	blx	sl
 8000fc4:	3001      	adds	r0, #1
 8000fc6:	d09d      	beq.n	8000f04 <_printf_i+0x15c>
 8000fc8:	3501      	adds	r5, #1
 8000fca:	68e3      	ldr	r3, [r4, #12]
 8000fcc:	9903      	ldr	r1, [sp, #12]
 8000fce:	1a5b      	subs	r3, r3, r1
 8000fd0:	42ab      	cmp	r3, r5
 8000fd2:	dcf2      	bgt.n	8000fba <_printf_i+0x212>
 8000fd4:	e7eb      	b.n	8000fae <_printf_i+0x206>
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	f104 0619 	add.w	r6, r4, #25
 8000fdc:	e7f5      	b.n	8000fca <_printf_i+0x222>
 8000fde:	bf00      	nop
 8000fe0:	080010f8 	.word	0x080010f8
 8000fe4:	08001109 	.word	0x08001109

08000fe8 <memmove>:
 8000fe8:	4288      	cmp	r0, r1
 8000fea:	b510      	push	{r4, lr}
 8000fec:	eb01 0402 	add.w	r4, r1, r2
 8000ff0:	d902      	bls.n	8000ff8 <memmove+0x10>
 8000ff2:	4284      	cmp	r4, r0
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	d807      	bhi.n	8001008 <memmove+0x20>
 8000ff8:	1e43      	subs	r3, r0, #1
 8000ffa:	42a1      	cmp	r1, r4
 8000ffc:	d008      	beq.n	8001010 <memmove+0x28>
 8000ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001006:	e7f8      	b.n	8000ffa <memmove+0x12>
 8001008:	4402      	add	r2, r0
 800100a:	4601      	mov	r1, r0
 800100c:	428a      	cmp	r2, r1
 800100e:	d100      	bne.n	8001012 <memmove+0x2a>
 8001010:	bd10      	pop	{r4, pc}
 8001012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800101a:	e7f7      	b.n	800100c <memmove+0x24>

0800101c <_sbrk_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d06      	ldr	r5, [pc, #24]	@ (8001038 <_sbrk_r+0x1c>)
 8001020:	2300      	movs	r3, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	f7ff fa88 	bl	800053c <_sbrk>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_sbrk_r+0x1a>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_sbrk_r+0x1a>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	200001ac 	.word	0x200001ac

0800103c <memcpy>:
 800103c:	440a      	add	r2, r1
 800103e:	4291      	cmp	r1, r2
 8001040:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001044:	d100      	bne.n	8001048 <memcpy+0xc>
 8001046:	4770      	bx	lr
 8001048:	b510      	push	{r4, lr}
 800104a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800104e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001052:	4291      	cmp	r1, r2
 8001054:	d1f9      	bne.n	800104a <memcpy+0xe>
 8001056:	bd10      	pop	{r4, pc}

08001058 <_realloc_r>:
 8001058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105c:	4680      	mov	r8, r0
 800105e:	4615      	mov	r5, r2
 8001060:	460c      	mov	r4, r1
 8001062:	b921      	cbnz	r1, 800106e <_realloc_r+0x16>
 8001064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001068:	4611      	mov	r1, r2
 800106a:	f7ff bc4b 	b.w	8000904 <_malloc_r>
 800106e:	b92a      	cbnz	r2, 800107c <_realloc_r+0x24>
 8001070:	f7ff fbdc 	bl	800082c <_free_r>
 8001074:	2400      	movs	r4, #0
 8001076:	4620      	mov	r0, r4
 8001078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800107c:	f000 f81a 	bl	80010b4 <_malloc_usable_size_r>
 8001080:	4285      	cmp	r5, r0
 8001082:	4606      	mov	r6, r0
 8001084:	d802      	bhi.n	800108c <_realloc_r+0x34>
 8001086:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800108a:	d8f4      	bhi.n	8001076 <_realloc_r+0x1e>
 800108c:	4629      	mov	r1, r5
 800108e:	4640      	mov	r0, r8
 8001090:	f7ff fc38 	bl	8000904 <_malloc_r>
 8001094:	4607      	mov	r7, r0
 8001096:	2800      	cmp	r0, #0
 8001098:	d0ec      	beq.n	8001074 <_realloc_r+0x1c>
 800109a:	42b5      	cmp	r5, r6
 800109c:	462a      	mov	r2, r5
 800109e:	4621      	mov	r1, r4
 80010a0:	bf28      	it	cs
 80010a2:	4632      	movcs	r2, r6
 80010a4:	f7ff ffca 	bl	800103c <memcpy>
 80010a8:	4621      	mov	r1, r4
 80010aa:	4640      	mov	r0, r8
 80010ac:	f7ff fbbe 	bl	800082c <_free_r>
 80010b0:	463c      	mov	r4, r7
 80010b2:	e7e0      	b.n	8001076 <_realloc_r+0x1e>

080010b4 <_malloc_usable_size_r>:
 80010b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010b8:	1f18      	subs	r0, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bfbc      	itt	lt
 80010be:	580b      	ldrlt	r3, [r1, r0]
 80010c0:	18c0      	addlt	r0, r0, r3
 80010c2:	4770      	bx	lr

080010c4 <_init>:
 80010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c6:	bf00      	nop
 80010c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ca:	bc08      	pop	{r3}
 80010cc:	469e      	mov	lr, r3
 80010ce:	4770      	bx	lr

080010d0 <_fini>:
 80010d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d2:	bf00      	nop
 80010d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d6:	bc08      	pop	{r3}
 80010d8:	469e      	mov	lr, r3
 80010da:	4770      	bx	lr
