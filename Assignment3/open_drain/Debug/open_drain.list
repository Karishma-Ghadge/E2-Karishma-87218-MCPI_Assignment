
open_drain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000408  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000408  08000408  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000408  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00001408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000410  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a40  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000297  00000000  00000000  00002a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00002d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000059  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ea7  00000000  00000000  00002de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b13  00000000  00000000  0001ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b6b8  00000000  00000000  0001b7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a6e5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000104  00000000  00000000  000a6ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a6fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  000a6fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080003f0 	.word	0x080003f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	080003f0 	.word	0x080003f0

08000218 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <DelayMs+0x44>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000226:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <DelayMs+0x48>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a0e      	ldr	r2, [pc, #56]	@ (8000264 <DelayMs+0x4c>)
 800022c:	fba2 2303 	umull	r2, r3, r2, r3
 8000230:	099b      	lsrs	r3, r3, #6
 8000232:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	68ba      	ldr	r2, [r7, #8]
 8000238:	fb02 f303 	mul.w	r3, r2, r3
 800023c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800023e:	bf00      	nop
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <DelayMs+0x44>)
 8000242:	685a      	ldr	r2, [r3, #4]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	1ad2      	subs	r2, r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	429a      	cmp	r2, r3
 800024c:	d3f8      	bcc.n	8000240 <DelayMs+0x28>
}
 800024e:	bf00      	nop
 8000250:	bf00      	nop
 8000252:	3714      	adds	r7, #20
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e0001000 	.word	0xe0001000
 8000260:	20000000 	.word	0x20000000
 8000264:	10624dd3 	.word	0x10624dd3

08000268 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	SystemInit();
 800026c:	f000 f83c 	bl	80002e8 <SystemInit>
	//Enable GPIOD.13 CLOCK RCC->AHB1ENR=1
	RCC->AHB1ENR |= BV(3);
 8000270:	4b1b      	ldr	r3, [pc, #108]	@ (80002e0 <main+0x78>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a1a      	ldr	r2, [pc, #104]	@ (80002e0 <main+0x78>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30
	//CONFIGURE GPIOD.13 AS OUTPUT IN MODER [27,26]=01
	GPIOD->MODER &= ~(BV(27)|BV(26));
 800027c:	4b19      	ldr	r3, [pc, #100]	@ (80002e4 <main+0x7c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a18      	ldr	r2, [pc, #96]	@ (80002e4 <main+0x7c>)
 8000282:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000286:	6013      	str	r3, [r2, #0]
	//CONFIGURE GPIOD.13 AS OPEN DRAIN IN OTYPER[13]=1
	GPIOD->OTYPER |= BV(13);
 8000288:	4b16      	ldr	r3, [pc, #88]	@ (80002e4 <main+0x7c>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4a15      	ldr	r2, [pc, #84]	@ (80002e4 <main+0x7c>)
 800028e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000292:	6053      	str	r3, [r2, #4]
	//CONFIGURE GPIOD.13 ASLOW SPEED IN OSPEEDR[27,26]=00
	GPIOD->OSPEEDR &= ~(BV(27)|BV(26));
 8000294:	4b13      	ldr	r3, [pc, #76]	@ (80002e4 <main+0x7c>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	4a12      	ldr	r2, [pc, #72]	@ (80002e4 <main+0x7c>)
 800029a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800029e:	6093      	str	r3, [r2, #8]
	//CONFIGURE GPIOD.13 WITH PULL UP RESISTOR PUPDR [27,26]=01
	GPIOD->PUPDR &= ~BV(27);
 80002a0:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <main+0x7c>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a0f      	ldr	r2, [pc, #60]	@ (80002e4 <main+0x7c>)
 80002a6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002aa:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR |= BV(26);
 80002ac:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <main+0x7c>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a0c      	ldr	r2, [pc, #48]	@ (80002e4 <main+0x7c>)
 80002b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002b6:	60d3      	str	r3, [r2, #12]
	while(1)
	{
		//CONFIGURE GPIOD.13->ODR =1
		GPIOD->ODR |= BV(13);
 80002b8:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <main+0x7c>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a09      	ldr	r2, [pc, #36]	@ (80002e4 <main+0x7c>)
 80002be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002c2:	6153      	str	r3, [r2, #20]
		//DELAY
		DelayMs(100);
 80002c4:	2064      	movs	r0, #100	@ 0x64
 80002c6:	f7ff ffa7 	bl	8000218 <DelayMs>
		//CONFIGURE GPIOD.13->ODR=0
		GPIOD->ODR &= ~BV(13);
 80002ca:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <main+0x7c>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a05      	ldr	r2, [pc, #20]	@ (80002e4 <main+0x7c>)
 80002d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002d4:	6153      	str	r3, [r2, #20]
		//DELAY
			DelayMs(100);
 80002d6:	2064      	movs	r0, #100	@ 0x64
 80002d8:	f7ff ff9e 	bl	8000218 <DelayMs>
		GPIOD->ODR |= BV(13);
 80002dc:	bf00      	nop
 80002de:	e7eb      	b.n	80002b8 <main+0x50>
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020c00 	.word	0x40020c00

080002e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  DWT_Init();
 80002ec:	f000 f802 	bl	80002f4 <DWT_Init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002f8:	4b14      	ldr	r3, [pc, #80]	@ (800034c <DWT_Init+0x58>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a13      	ldr	r2, [pc, #76]	@ (800034c <DWT_Init+0x58>)
 80002fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000302:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000304:	4b11      	ldr	r3, [pc, #68]	@ (800034c <DWT_Init+0x58>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4a10      	ldr	r2, [pc, #64]	@ (800034c <DWT_Init+0x58>)
 800030a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800030e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <DWT_Init+0x5c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a0e      	ldr	r2, [pc, #56]	@ (8000350 <DWT_Init+0x5c>)
 8000316:	f023 0301 	bic.w	r3, r3, #1
 800031a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <DWT_Init+0x5c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a0b      	ldr	r2, [pc, #44]	@ (8000350 <DWT_Init+0x5c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000328:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <DWT_Init+0x5c>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800032e:	bf00      	nop
    __ASM volatile ("NOP");
 8000330:	bf00      	nop
    __ASM volatile ("NOP");
 8000332:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <DWT_Init+0x5c>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	bf0c      	ite	eq
 800033c:	2301      	moveq	r3, #1
 800033e:	2300      	movne	r3, #0
 8000340:	b2db      	uxtb	r3, r3
}
 8000342:	4618      	mov	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000edf0 	.word	0xe000edf0
 8000350:	e0001000 	.word	0xe0001000

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	@ (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f7ff ffc6 	bl	80002e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	@ (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	@ (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	@ (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	@ (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 f811 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ff6f 	bl	8000268 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000398:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 800039c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003a0:	20000020 	.word	0x20000020

080003a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC1_2_IRQHandler>
	...

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	@ (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	@ (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	@ (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	@ (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
